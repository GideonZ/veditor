/* Generated By:JavaCC: Do not edit this line. VerilogParserCoreTokenManager.java */
package net.sourceforge.veditor.parser.verilog;

/** Token Manager. */
public class VerilogParserCoreTokenManager implements VerilogParserCoreConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8000000400000L) != 0L)
         {
            jjmatchedKind = 122;
            return 258;
         }
         if ((active0 & 0x800001000000000L) != 0L)
         {
            jjmatchedKind = 122;
            return 229;
         }
         if ((active0 & 0xe324cfef1bbb0000L) != 0L || (active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 122;
            return 36;
         }
         if ((active0 & 0x200044000000L) != 0L)
         {
            jjmatchedKind = 122;
            return 277;
         }
         if ((active0 & 0x180L) != 0L)
            return 285;
         if ((active1 & 0x1000L) != 0L)
            return 0;
         if ((active0 & 0x12000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            return 98;
         }
         if ((active0 & 0x2L) != 0L || (active1 & 0x40000000000L) != 0L)
            return 89;
         if ((active1 & 0x200000L) != 0L)
            return 40;
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 122;
            return 172;
         }
         if ((active0 & 0x80000000000000L) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 122;
            return 125;
         }
         if ((active0 & 0x1401100020000000L) != 0L)
         {
            jjmatchedKind = 122;
            return 184;
         }
         return -1;
      case 1:
         if ((active0 & 0x4000000001000000L) != 0L)
            return 36;
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 122;
               jjmatchedPos = 1;
            }
            return 276;
         }
         if ((active0 & 0x10000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 122;
               jjmatchedPos = 1;
            }
            return 32;
         }
         if ((active0 & 0xbf2fffff3eff0000L) != 0L || (active1 & 0x3L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 122;
               jjmatchedPos = 1;
            }
            return 36;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 122;
               jjmatchedPos = 1;
            }
            return 124;
         }
         return -1;
      case 2:
         if ((active0 & 0x22010aa189a0000L) != 0L)
            return 36;
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 122;
               jjmatchedPos = 2;
            }
            return 123;
         }
         if ((active0 & 0xbd1fef5566650000L) != 0L || (active1 & 0x3L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 122;
               jjmatchedPos = 2;
            }
            return 36;
         }
         return -1;
      case 3:
         if ((active0 & 0xa7becfef34c70000L) != 0L || (active1 & 0x3L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 122;
               jjmatchedPos = 3;
            }
            return 36;
         }
         if ((active0 & 0x1801201042300000L) != 0L)
            return 36;
         return -1;
      case 4:
         if ((active0 & 0x200450004040000L) != 0L)
            return 36;
         if ((active0 & 0xb5be8aef30c30000L) != 0L || (active1 & 0x3L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 4;
            return 36;
         }
         return -1;
      case 5:
         if ((active0 & 0x88820020010000L) != 0L || (active1 & 0x1L) != 0L)
            return 36;
         if ((active0 & 0xb53608ef10c20000L) != 0L || (active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 5;
            return 36;
         }
         return -1;
      case 6:
         if ((active0 & 0x313600cc00820000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 6;
            return 36;
         }
         if ((active0 & 0x8400082310400000L) != 0L || (active1 & 0x2L) != 0L)
            return 36;
         return -1;
      case 7:
         if ((active0 & 0x3110004400000000L) != 0L)
            return 36;
         if ((active0 & 0x26008800820000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 7;
            return 36;
         }
         return -1;
      case 8:
         if ((active0 & 0x2000000020000L) != 0L)
            return 36;
         if ((active0 & 0x24008800800000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 8;
            return 36;
         }
         return -1;
      case 9:
         if ((active0 & 0x4000000800000L) != 0L)
            return 36;
         if ((active0 & 0x20008800000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 9;
            return 36;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_0(0, 8, 285);
      case 32:
         return jjStartNfaWithStates_0(0, 7, 285);
      case 33:
         jjmatchedKind = 91;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40001000000000L, 0x0L);
      case 35:
         return jjStopAtPos(0, 83);
      case 36:
         return jjStartNfaWithStates_0(0, 85, 40);
      case 37:
         return jjStopAtPos(0, 110);
      case 38:
         jjmatchedKind = 107;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000L, 0x0L);
      case 40:
         return jjStartNfaWithStates_0(0, 76, 0);
      case 41:
         return jjStopAtPos(0, 77);
      case 42:
         jjmatchedKind = 105;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000000L, 0x0L);
      case 43:
         jjmatchedKind = 103;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 86);
      case 45:
         jjmatchedKind = 104;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000L, 0x40L);
      case 46:
         return jjStopAtPos(0, 87);
      case 47:
         jjmatchedKind = 106;
         return jjMoveStringLiteralDfa1_0(0x2L, 0x0L, 0x0L);
      case 58:
         return jjStopAtPos(0, 94);
      case 59:
         return jjStopAtPos(0, 82);
      case 60:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100800400000000L, 0x0L);
      case 61:
         jjmatchedKind = 88;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000200000000L, 0x0L);
      case 62:
         jjmatchedKind = 89;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x201000800000000L, 0x0L);
      case 63:
         return jjStopAtPos(0, 93);
      case 64:
         return jjStopAtPos(0, 84);
      case 91:
         return jjStopAtPos(0, 80);
      case 93:
         return jjStopAtPos(0, 81);
      case 94:
         jjmatchedKind = 109;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000000L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x1L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0xa100000100000000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x2040aa028a0000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x200000418100000L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x804000000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xd0001000000L, 0x2L, 0x0L);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x4000020000000000L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x12000000000000L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x1401100020000000L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x8000000400000L, 0x0L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x800001000000000L, 0x0L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x200044000000L, 0x0L, 0x0L);
      case 123:
         return jjStopAtPos(0, 78);
      case 124:
         jjmatchedKind = 108;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 79);
      case 126:
         jjmatchedKind = 92;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe000000000000L, 0x0L);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 102);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 113);
         break;
      case 42:
         if ((active0 & 0x2L) != 0L)
            return jjStopAtPos(1, 1);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 119);
         break;
      case 58:
         if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 95);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 96);
         break;
      case 60:
         if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 61:
         if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 98);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 99);
         else if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x60000000000000L, active2, 0L);
      case 62:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x40L) != 0L)
            return jjStopAtPos(1, 134);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000000000000L, active2, 0L);
      case 94:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 115);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2001040000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x3501904120040000L, active1, 0L, active2, 0L);
      case 102:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(1, 24, 36);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x8808200000000000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0x1L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x200daa008a0000L, active1, 0x2L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x204000018310000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L, active1, 0L, active2, 0L);
      case 114:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 62, 36);
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x20400000000L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0L, active2, 0L);
      case 124:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 101);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 114);
         break;
      case 126:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 116);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 60:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(2, 120);
         break;
      case 61:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStopAtPos(2, 117);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(2, 118);
         break;
      case 62:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(2, 121);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x1101000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2000aa00830000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000400000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000100000000L, active1, 0L);
      case 103:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 44, 36);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000040000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x44200000L, active1, 0x2L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x804400000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x10040000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x10020000000L, active1, 0L);
      case 114:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x202200010100000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x8080001002000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0xa0000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x8006000100000000L, active1, 0x1L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000600400000L, active1, 0L);
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 36);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 36);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 59, 36);
         return jjMoveStringLiteralDfa4_0(active0, 0x400084030000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000040000L, active1, 0L);
      case 107:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 36);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 36);
         break;
      case 108:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000004000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L, active1, 0L);
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 36);
         return jjMoveStringLiteralDfa4_0(active0, 0x8400000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x2030020000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000800000L, active1, 0L);
      case 116:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 36);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L, active1, 0x2L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x50000010000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x2400802220000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 36);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 57, 36);
         return jjMoveStringLiteralDfa5_0(active0, 0x18008000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x80080000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L, active1, 0x2L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000010000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 18, 36);
         break;
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x20004000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 36);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 36);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 46, 36);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000400000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x20900000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L, active1, 0x2L);
      case 100:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 36);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L, active1, 0L);
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 36);
         return jjMoveStringLiteralDfa6_0(active0, 0x2080010800000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x1100000400000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000100000000L, active1, 0L);
      case 110:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 36);
         return jjMoveStringLiteralDfa6_0(active0, 0x8800000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 47, 36);
         return jjMoveStringLiteralDfa6_0(active0, 0x2010000000000000L, active1, 0L);
      case 115:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 36);
         return jjMoveStringLiteralDfa6_0(active0, 0x400002200000000L, active1, 0L);
      case 116:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 29, 36);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 41, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x2004000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x800800000L, active1, 0L);
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 36);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 58, 36);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 63, 36);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L, active1, 0L);
      case 107:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 36);
         break;
      case 108:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(6, 65, 36);
         break;
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 28, 36);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 43, 36);
         break;
      case 116:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 32, 36);
         return jjMoveStringLiteralDfa7_0(active0, 0x12004000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L, active1, 0L);
      case 121:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 22, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 38, 36);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 60, 36);
         return jjMoveStringLiteralDfa8_0(active0, 0x22000000000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000L);
      case 109:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 61, 36);
         break;
      case 110:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 34, 36);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 56, 36);
         break;
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x4008000000000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L);
      case 121:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 52, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x4008000000000L);
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(8, 17, 36);
         break;
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L);
      case 114:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 49, 36);
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 109:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 50, 36);
         break;
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x20008000000000L);
      case 121:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(9, 23, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 39, 36);
         break;
      case 110:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(10, 35, 36);
         break;
      case 121:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 53, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 285;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 98:
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAdd(36);
                  break;
               case 172:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAdd(36);
                  break;
               case 123:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAdd(36);
                  break;
               case 125:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAdd(36);
                  break;
               case 276:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAdd(36);
                  break;
               case 184:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAdd(36);
                  break;
               case 229:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAdd(36);
                  break;
               case 258:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAdd(36);
                  break;
               case 277:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAdd(36);
                  break;
               case 124:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAdd(36);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 12);
                  else if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(3, 34);
                  else if (curChar == 47)
                     jjCheckNAddTwoStates(86, 89);
                  else if (curChar == 39)
                     jjCheckNAddStates(13, 20);
                  else if (curChar == 34)
                     jjCheckNAddStates(21, 23);
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 40;
                  else if (curChar == 40)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 126)
                        kind = 126;
                     jjCheckNAdd(42);
                  }
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAdd(36);
                  break;
               case 89:
                  if (curChar == 47)
                  {
                     if (kind > 15)
                        kind = 15;
                     jjCheckNAdd(90);
                  }
                  if (curChar == 47)
                     jjCheckNAddStates(24, 27);
                  break;
               case 285:
               case 3:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(3, 34);
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xfffffdffffffffffL & l) != 0L && kind > 4)
                     kind = 4;
                  break;
               case 5:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(28, 29);
                  break;
               case 7:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(30, 31);
                  break;
               case 9:
                  if ((0xfffffffffffffbffL & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 38:
                  if ((0xfffffffeffffffffL & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 39:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(42);
                  break;
               case 43:
                  if (curChar == 34)
                     jjCheckNAddStates(21, 23);
                  break;
               case 44:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(21, 23);
                  break;
               case 46:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(21, 23);
                  break;
               case 47:
                  if (curChar == 34 && kind > 133)
                     kind = 133;
                  break;
               case 48:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(32, 35);
                  break;
               case 49:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(21, 23);
                  break;
               case 50:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(49);
                  break;
               case 52:
                  if (curChar == 39)
                     jjCheckNAddStates(13, 20);
                  break;
               case 55:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAddTwoStates(55, 56);
                  break;
               case 56:
                  if ((0x83ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(56);
                  break;
               case 59:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 60:
                  if ((0x83ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(60);
                  break;
               case 63:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAddTwoStates(63, 64);
                  break;
               case 64:
                  if ((0x80ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(64);
                  break;
               case 67:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAddTwoStates(67, 68);
                  break;
               case 68:
                  if ((0x8003000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(68);
                  break;
               case 75:
                  if (curChar == 48 && kind > 69)
                     kind = 69;
                  break;
               case 80:
                  if (curChar == 49 && kind > 69)
                     kind = 69;
                  break;
               case 85:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(86, 89);
                  break;
               case 86:
                  if (curChar == 47)
                     jjCheckNAddStates(24, 27);
                  break;
               case 87:
                  if (curChar == 47)
                     jjCheckNAdd(86);
                  break;
               case 90:
                  if ((0xfffffffffffffbffL & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAdd(90);
                  break;
               case 158:
                  if (curChar == 48 && kind > 72)
                     kind = 72;
                  break;
               case 163:
                  if (curChar == 49 && kind > 72)
                     kind = 72;
                  break;
               case 195:
                  if (curChar == 48 && kind > 75)
                     kind = 75;
                  break;
               case 202:
                  if (curChar == 49 && kind > 75)
                     kind = 75;
                  break;
               case 209:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 12);
                  break;
               case 210:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(210, 211);
                  break;
               case 211:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 212:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(212, 213);
                  break;
               case 213:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(57, 58);
                  break;
               case 214:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(214, 215);
                  break;
               case 215:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(61, 62);
                  break;
               case 216:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(216, 217);
                  break;
               case 217:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(65, 66);
                  break;
               case 218:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(218, 219);
                  break;
               case 219:
                  if (curChar != 46)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(220);
                  break;
               case 220:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(220);
                  break;
               case 221:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(36, 38);
                  break;
               case 222:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(223, 224);
                  break;
               case 223:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(223, 224);
                  break;
               case 225:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(226);
                  break;
               case 226:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(226);
                  break;
               case 230:
                  if (curChar == 49 && kind > 68)
                     kind = 68;
                  break;
               case 238:
                  if (curChar == 48 && kind > 68)
                     kind = 68;
                  break;
               case 253:
                  if (curChar == 48 && kind > 67)
                     kind = 67;
                  break;
               case 259:
                  if (curChar == 49 && kind > 67)
                     kind = 67;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 98:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 122)
                        kind = 122;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 118;
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 106;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 97;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 32;
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 111;
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 103;
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 172:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 122)
                        kind = 122;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 179;
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 175;
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 123:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 122)
                        kind = 122;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 125:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 122)
                        kind = 122;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 110)
                     jjCheckNAdd(126);
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 276:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 122)
                        kind = 122;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 110)
                     jjCheckNAdd(233);
                  break;
               case 184:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 122)
                        kind = 122;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 207;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 189;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 186;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 183;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 200;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 229:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 122)
                        kind = 122;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 250;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 245;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 243;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 239;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 236;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 231;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 228;
                  break;
               case 258:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 122)
                        kind = 122;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 273;
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 263;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 268;
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 257;
                  break;
               case 277:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 122)
                        kind = 122;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 283;
                  else if (curChar == 111)
                     jjCheckNAdd(241);
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 276;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 280;
                  break;
               case 124:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 122)
                        kind = 122;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 122)
                        kind = 122;
                     jjCheckNAdd(36);
                  }
                  else if (curChar == 96)
                     jjCheckNAddStates(39, 42);
                  else if (curChar == 92)
                     jjCheckNAdd(38);
                  if (curChar == 119)
                     jjAddStates(43, 46);
                  else if (curChar == 115)
                     jjAddStates(47, 50);
                  else if (curChar == 116)
                     jjAddStates(51, 57);
                  else if (curChar == 114)
                     jjAddStates(58, 63);
                  else if (curChar == 98)
                     jjAddStates(64, 66);
                  else if (curChar == 110)
                     jjAddStates(67, 73);
                  else if (curChar == 99)
                     jjAddStates(74, 78);
                  else if (curChar == 97)
                     jjAddStates(79, 80);
                  else if (curChar == 112)
                     jjCheckNAddStates(81, 87);
                  else if (curChar == 104)
                     jjAddStates(88, 89);
                  else if (curChar == 120)
                     jjAddStates(90, 91);
                  else if (curChar == 95)
                  {
                     if (kind > 126)
                        kind = 126;
                     jjCheckNAdd(42);
                  }
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 122)
                        kind = 122;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 285:
               case 34:
                  if (curChar == 112)
                     jjCheckNAdd(33);
                  break;
               case 1:
                  if (kind > 4)
                     kind = 4;
                  break;
               case 4:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 6:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 8:
                  if (curChar != 100)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(9);
                  break;
               case 9:
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(9);
                  break;
               case 10:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 11:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 25:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 31:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 33:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 35:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAdd(36);
                  break;
               case 37:
                  if (curChar == 92)
                     jjCheckNAdd(38);
                  break;
               case 38:
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAdd(38);
                  break;
               case 40:
               case 41:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(41);
                  break;
               case 42:
                  if (curChar != 95)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(42);
                  break;
               case 44:
                  jjCheckNAddStates(21, 23);
                  break;
               case 45:
                  if (curChar == 92)
                     jjAddStates(92, 94);
                  break;
               case 46:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(21, 23);
                  break;
               case 53:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 54:
                  if ((0x1000000010L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAddTwoStates(55, 56);
                  break;
               case 56:
                  if ((0x500000085000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(56);
                  break;
               case 57:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 58:
                  if ((0x10000000100L & l) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 60:
                  if ((0x500007e8500007eL & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(60);
                  break;
               case 61:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 62:
                  if ((0x800000008000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAddTwoStates(63, 64);
                  break;
               case 64:
                  if ((0x500000085000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(64);
                  break;
               case 65:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 66:
                  if ((0x400000004L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAddTwoStates(67, 68);
                  break;
               case 68:
                  if ((0x500000085000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(68);
                  break;
               case 69:
                  if (curChar == 120)
                     jjAddStates(90, 91);
                  break;
               case 70:
                  if (curChar == 114 && kind > 70)
                     kind = 70;
                  break;
               case 71:
               case 72:
               case 155:
                  if (curChar == 111)
                     jjCheckNAdd(70);
                  break;
               case 73:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 104)
                     jjAddStates(88, 89);
                  break;
               case 76:
                  if (curChar == 122)
                     jjCheckNAdd(75);
                  break;
               case 77:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 81:
                  if (curChar == 122)
                     jjCheckNAdd(80);
                  break;
               case 82:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 88:
                  if (curChar == 96)
                     jjCheckNAddStates(95, 97);
                  break;
               case 90:
                  if (kind > 15)
                     kind = 15;
                  jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 91:
                  if (curChar == 96)
                     jjCheckNAddStates(39, 42);
                  break;
               case 92:
                  if (curChar == 112)
                     jjCheckNAddStates(81, 87);
                  break;
               case 93:
                  if (curChar == 101 && kind > 66)
                     kind = 66;
                  break;
               case 94:
               case 148:
                  if (curChar == 103)
                     jjCheckNAdd(93);
                  break;
               case 95:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 99:
                  if (curChar == 108)
                     jjCheckNAdd(75);
                  break;
               case 100:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if (curChar == 108)
                     jjCheckNAdd(80);
                  break;
               case 103:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 115 && kind > 72)
                     kind = 72;
                  break;
               case 106:
               case 168:
               case 182:
               case 185:
                  if (curChar == 111)
                     jjCheckNAdd(105);
                  break;
               case 107:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if (curChar == 112 && kind > 73)
                     kind = 73;
                  break;
               case 109:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if (curChar == 110 && kind > 73)
                     kind = 73;
                  break;
               case 114:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 115:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if (curChar == 97)
                     jjAddStates(79, 80);
                  break;
               case 121:
                  if (curChar == 116 && kind > 54)
                     kind = 54;
                  break;
               case 122:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 126:
                  if (curChar == 100 && kind > 70)
                     kind = 70;
                  break;
               case 127:
               case 153:
                  if (curChar == 110)
                     jjCheckNAdd(126);
                  break;
               case 128:
                  if (curChar == 99)
                     jjAddStates(74, 78);
                  break;
               case 129:
                  if (curChar == 101 && kind > 31)
                     kind = 31;
                  break;
               case 130:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if (curChar == 120 && kind > 31)
                     kind = 31;
                  break;
               case 133:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 134:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 135:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if (curChar == 122 && kind > 31)
                     kind = 31;
                  break;
               case 137:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if (curChar == 114 && kind > 54)
                     kind = 54;
                  break;
               case 141:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if (curChar == 115 && kind > 74)
                     kind = 74;
                  break;
               case 145:
               case 188:
                  if (curChar == 111)
                     jjCheckNAdd(144);
                  break;
               case 146:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 147:
                  if (curChar == 110)
                     jjAddStates(67, 73);
                  break;
               case 149:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 151:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 154:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 156:
                  if (curChar == 116 && kind > 71)
                     kind = 71;
                  break;
               case 157:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 159:
               case 173:
                  if (curChar == 102)
                     jjCheckNAdd(158);
                  break;
               case 160:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 161:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 162:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 164:
               case 177:
                  if (curChar == 102)
                     jjCheckNAdd(163);
                  break;
               case 165:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 166:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 167:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 169:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 170:
                  if (curChar == 98)
                     jjAddStates(64, 66);
                  break;
               case 171:
                  if (curChar == 102 && kind > 71)
                     kind = 71;
                  break;
               case 174:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 175:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 176:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 178:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 179:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 180:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 181:
                  if (curChar == 114)
                     jjAddStates(58, 63);
                  break;
               case 183:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 182;
                  break;
               case 186:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 187:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 186;
                  break;
               case 189:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 190:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 191:
                  if (curChar == 110 && kind > 75)
                     kind = 75;
                  break;
               case 192:
               case 245:
                  if (curChar == 97)
                     jjCheckNAdd(191);
                  break;
               case 193:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 194:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 196:
               case 247:
                  if (curChar == 102)
                     jjCheckNAdd(195);
                  break;
               case 197:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 196;
                  break;
               case 198:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 199:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 198;
                  break;
               case 200:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 201:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 200;
                  break;
               case 203:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 202;
                  break;
               case 204:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 203;
                  break;
               case 205:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 204;
                  break;
               case 206:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 205;
                  break;
               case 207:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 206;
                  break;
               case 208:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 207;
                  break;
               case 224:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(98, 99);
                  break;
               case 227:
                  if (curChar == 116)
                     jjAddStates(51, 57);
                  break;
               case 228:
                  if (curChar == 105 && kind > 68)
                     kind = 68;
                  break;
               case 231:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 230;
                  break;
               case 232:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 231;
                  break;
               case 233:
                  if (curChar == 100 && kind > 68)
                     kind = 68;
                  break;
               case 234:
                  if (curChar == 110)
                     jjCheckNAdd(233);
                  break;
               case 235:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 234;
                  break;
               case 236:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 235;
                  break;
               case 237:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 236;
                  break;
               case 239:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 238;
                  break;
               case 240:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 239;
                  break;
               case 241:
                  if (curChar == 114 && kind > 68)
                     kind = 68;
                  break;
               case 242:
                  if (curChar == 111)
                     jjCheckNAdd(241);
                  break;
               case 243:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 242;
                  break;
               case 244:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 243;
                  break;
               case 246:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 245;
                  break;
               case 248:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 247;
                  break;
               case 249:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 248;
                  break;
               case 250:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 249;
                  break;
               case 251:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 250;
                  break;
               case 252:
                  if (curChar == 115)
                     jjAddStates(47, 50);
                  break;
               case 254:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 253;
                  break;
               case 255:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 254;
                  break;
               case 256:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 255;
                  break;
               case 257:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 256;
                  break;
               case 260:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 259;
                  break;
               case 261:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 260;
                  break;
               case 262:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 261;
                  break;
               case 263:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 262;
                  break;
               case 264:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 263;
                  break;
               case 265:
                  if (curChar == 103)
                     jjCheckNAdd(75);
                  break;
               case 266:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 265;
                  break;
               case 267:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 266;
                  break;
               case 268:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 267;
                  break;
               case 269:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 268;
                  break;
               case 270:
                  if (curChar == 103)
                     jjCheckNAdd(80);
                  break;
               case 271:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 270;
                  break;
               case 272:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 271;
                  break;
               case 273:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 272;
                  break;
               case 274:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 273;
                  break;
               case 275:
                  if (curChar == 119)
                     jjAddStates(43, 46);
                  break;
               case 278:
                  if (curChar == 111)
                     jjCheckNAdd(241);
                  break;
               case 279:
                  if (curChar == 107)
                     jjCheckNAdd(75);
                  break;
               case 280:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 279;
                  break;
               case 281:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 280;
                  break;
               case 282:
                  if (curChar == 107)
                     jjCheckNAdd(80);
                  break;
               case 283:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 282;
                  break;
               case 284:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 283;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 4)
                     kind = 4;
                  break;
               case 9:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 38:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 44:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(21, 23);
                  break;
               case 90:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjstateSet[jjnewStateCnt++] = 90;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 285 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_3()
{
   return jjMoveNfa_3(27, 0);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 28;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(100, 101);
                  break;
               case 3:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(102, 103);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 4:
                  if (curChar == 100 && kind > 13)
                     kind = 13;
                  break;
               case 5:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 18:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 24:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 28 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x4L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(1, 2);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x20L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 224, 53, 54, 57, 
   58, 61, 62, 65, 66, 44, 45, 47, 87, 88, 3, 34, 5, 29, 7, 23, 
   44, 45, 49, 47, 221, 222, 224, 88, 3, 34, 35, 277, 278, 281, 284, 258, 
   264, 269, 274, 229, 232, 237, 240, 244, 246, 251, 184, 187, 190, 194, 201, 208, 
   172, 176, 180, 152, 154, 155, 157, 162, 167, 169, 131, 135, 139, 143, 146, 125, 
   127, 33, 98, 101, 104, 107, 112, 119, 79, 84, 71, 73, 46, 48, 50, 88, 
   3, 34, 225, 226, 1, 22, 3, 16, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, "\155\157\144\165\154\145", 
"\145\156\144\155\157\144\165\154\145", "\142\145\147\151\156", "\145\156\144", "\146\157\162\153", 
"\152\157\151\156", "\163\160\145\143\151\146\171", "\145\156\144\163\160\145\143\151\146\171", 
"\151\146", "\145\154\163\145", "\167\150\151\154\145", "\146\157\162", 
"\146\157\162\145\166\145\162", "\162\145\160\145\141\164", "\167\141\151\164", null, 
"\144\145\146\141\165\154\164", "\145\156\144\143\141\163\145", "\146\165\156\143\164\151\157\156", 
"\145\156\144\146\165\156\143\164\151\157\156", "\164\141\163\153", "\145\156\144\164\141\163\153", 
"\147\145\156\145\162\141\164\145", "\145\156\144\147\145\156\145\162\141\164\145", "\151\156\160\165\164", 
"\157\165\164\160\165\164", "\151\156\157\165\164", "\151\156\164\145\147\145\162", "\162\145\147", 
"\167\151\162\145", "\145\166\145\156\164", "\147\145\156\166\141\162", "\162\145\141\154", 
"\160\141\162\141\155\145\164\145\162", "\154\157\143\141\154\160\141\162\141\155", "\163\151\147\156\145\144", 
"\160\162\157\160\145\162\164\171", "\145\156\144\160\162\157\160\145\162\164\171", null, 
"\141\163\163\151\147\156", "\144\145\141\163\163\151\147\156", "\146\157\162\143\145", 
"\162\145\154\145\141\163\145", "\164\151\155\145", "\162\145\141\154\164\151\155\145", 
"\144\145\146\160\141\162\141\155", "\157\162", "\144\151\163\141\142\154\145", "\141\154\167\141\171\163", 
"\151\156\151\164\151\141\154", null, null, null, null, null, null, null, null, null, null, "\50", "\51", 
"\173", "\175", "\133", "\135", "\73", "\43", "\100", "\44", "\54", "\56", "\75", 
"\76", "\74", "\41", "\176", "\77", "\72", "\53\72", "\55\72", "\75\75", "\74\75", 
"\76\75", "\41\75", "\174\174", "\46\46", "\53", "\55", "\52", "\57", "\46", "\174", 
"\136", "\45", "\74\74", "\76\76", "\176\46", "\176\174", "\176\136", "\136\176", 
"\75\75\75", "\41\75\75", "\52\52", "\74\74\74", "\76\76\76", null, null, null, null, null, 
null, null, null, null, null, null, null, "\55\76", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_MULTI_LINE_COMMENT",
   "IN_PROPERTY",
   "IN_PROTECTED",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, 1, 0, -1, 2, 0, -1, -1, -1, -1, -1, -1, 3, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffff0001L, 0x4fffffffffffffffL, 0x70L, 
};
static final long[] jjtoSkip = {
   0xafa4L, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x8000L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x505aL, 0x0L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[285];
private final int[] jjstateSet = new int[570];
protected char curChar;
/** Constructor. */
public VerilogParserCoreTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public VerilogParserCoreTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 285; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 13 && (0x3400L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 3)
         {
            jjmatchedKind = 3;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 6)
         {
            jjmatchedKind = 6;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 14)
         {
            jjmatchedKind = 14;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
           }
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
